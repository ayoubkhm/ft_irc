1. Organisation du Projet
1.1 Structure des fichiers
Une bonne organisation des fichiers facilitera le dÃ©veloppement et la maintenance du projet.

makefile
Copier
Modifier
ft_irc/
â”‚â”€â”€ src/
â”‚   â”‚â”€â”€ main.cpp             # Point d'entrÃ©e du programme
â”‚   â”‚â”€â”€ Server.cpp           # Classe principale du serveur
â”‚   â”‚â”€â”€ Client.cpp           # Classe reprÃ©sentant un client connectÃ©
â”‚   â”‚â”€â”€ CommandHandler.cpp   # GÃ¨re les commandes IRC
â”‚   â”‚â”€â”€ Channel.cpp          # GÃ¨re les canaux IRC
â”‚   â”‚â”€â”€ Utils.cpp            # Fonctions utilitaires
â”‚
â”‚â”€â”€ include/
â”‚   â”‚â”€â”€ Server.hpp
â”‚   â”‚â”€â”€ Client.hpp
â”‚   â”‚â”€â”€ CommandHandler.hpp
â”‚   â”‚â”€â”€ Channel.hpp
â”‚   â”‚â”€â”€ Utils.hpp
â”‚
â”‚â”€â”€ Makefile                 # Compilation du projet
â”‚â”€â”€ README.md                # Explication du projet et guide d'utilisation
2. DÃ©composition du projet en modules
Le projet peut Ãªtre divisÃ© en plusieurs grandes parties, chacune ayant une responsabilitÃ© spÃ©cifique.

2.1 Initialisation du serveur
âœ… Objectif : CrÃ©er un serveur qui Ã©coute les connexions et accepte plusieurs clients.

ğŸ”¹ Fichiers : Server.hpp / Server.cpp

ğŸ”¹ TÃ¢ches :

CrÃ©er une socket TCP et la mettre en mode Ã©coute sur le port donnÃ©.
GÃ©rer plusieurs clients en mode non bloquant avec poll().
GÃ©rer l'acceptation des nouvelles connexions et stocker les clients connectÃ©s.
2.2 Gestion des clients
âœ… Objectif : Suivre et gÃ©rer les clients connectÃ©s.

ğŸ”¹ Fichiers : Client.hpp / Client.cpp

ğŸ”¹ TÃ¢ches :

Stocker les informations des clients :
Socket associÃ©e
Nickname
Username
Ã‰tat d'authentification (connectÃ© ou non)
Lire et stocker les messages entrants des clients.
VÃ©rifier la commande initiale (PASS, NICK, USER) pour l'authentification.
2.3 Gestion des commandes IRC
âœ… Objectif : ImplÃ©menter les commandes essentielles du protocole IRC.

ğŸ”¹ Fichiers : CommandHandler.hpp / CommandHandler.cpp

ğŸ”¹ TÃ¢ches :

Lire et interprÃ©ter les messages reÃ§us des clients.
ImplÃ©menter les commandes principales :
/NICK : Changer le pseudonyme dâ€™un client.
/USER : DÃ©finir lâ€™utilisateur.
/JOIN : Rejoindre un canal.
/PART : Quitter un canal.
/PRIVMSG : Envoyer un message privÃ©.
/KICK : Expulser un utilisateur dâ€™un canal.
/MODE : Modifier les paramÃ¨tres dâ€™un canal.
/INVITE : Inviter un utilisateur dans un canal.
/TOPIC : DÃ©finir un sujet pour un canal.
VÃ©rifier la validitÃ© des arguments et gÃ©rer les erreurs.
2.4 Gestion des canaux
âœ… Objectif : Permettre la crÃ©ation et la gestion des canaux IRC.

ğŸ”¹ Fichiers : Channel.hpp / Channel.cpp

ğŸ”¹ TÃ¢ches :

Stocker les utilisateurs connectÃ©s Ã  un canal.
GÃ©rer les opÃ©rateurs du canal.
ImplÃ©menter les modes (+i, +t, +k, +o, +l).
Transmettre les messages envoyÃ©s dans le canal Ã  tous ses membres.
2.5 Communication rÃ©seau
âœ… Objectif : Assurer une communication fluide entre le serveur et les clients.

ğŸ”¹ Fichiers : Server.cpp et Utils.cpp

ğŸ”¹ TÃ¢ches :

GÃ©rer la rÃ©ception et lâ€™envoi de messages avec poll().
Lire et reconstruire correctement les messages fragmentÃ©s.
Fermer proprement les connexions lorsquâ€™un client se dÃ©connecte.
2.6 Gestion des erreurs et logs
âœ… Objectif : Assurer un bon suivi des Ã©vÃ©nements et gÃ©rer les erreurs.

ğŸ”¹ Fichiers : Utils.hpp / Utils.cpp

ğŸ”¹ TÃ¢ches :

ImplÃ©menter un systÃ¨me de logs pour suivre lâ€™activitÃ© du serveur.
GÃ©rer proprement les dÃ©connexions inattendues.
VÃ©rifier les messages reÃ§us pour Ã©viter les injections de donnÃ©es.
2.7 Test et validation
âœ… Objectif : Tester toutes les fonctionnalitÃ©s du serveur.

ğŸ”¹ TÃ¢ches :

Tester la connexion avec un client IRC (ex : HexChat, Weechat).
VÃ©rifier le bon fonctionnement de chaque commande (NICK, JOIN, PRIVMSG, etc.).
Simuler des paquets fragmentÃ©s pour tester la robustesse du parsing.
VÃ©rifier la gestion des erreurs et des connexions multiples.
3. Feuille de Route
Phase 1 : Mise en place du serveur de base
âœ… ImplÃ©menter la gestion des connexions (Server.cpp).
âœ… ImplÃ©menter la gestion des clients (Client.cpp).
âœ… Tester la connexion avec un client IRC.

Phase 2 : Ajout des commandes IRC de base
âœ… Ajouter /NICK, /USER, /JOIN, /PART, /PRIVMSG.
âœ… GÃ©rer la transmission des messages dans les canaux.

Phase 3 : Ajout des fonctionnalitÃ©s avancÃ©es
âœ… Ajouter /KICK, /INVITE, /TOPIC, /MODE.
âœ… ImplÃ©menter la gestion des opÃ©rateurs et des permissions.

Phase 4 : Tests et optimisation
âœ… Tester en conditions rÃ©elles avec plusieurs clients.
âœ… VÃ©rifier la gestion des erreurs et la stabilitÃ© du serveur.